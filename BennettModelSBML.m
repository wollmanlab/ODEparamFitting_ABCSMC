
%
% This file is automatically generated with 
% the System Biology Format Converter (http://sbfc.sourceforge.net/)
% from an SBML file.
%
% The conversion system has the following limitations:
%  - You may have to re order some reactions and Assignment Rules definition
%  - Delays are not taken into account
%  - You should change the lsode parameters (start, end, steps) to get better results
%

%
% The following line is there to be sure that Octave think that this file 
% is a script and not function file
%

%
% Model name = Lemon2003_Ca2Dynamics
%
% is urn:miriam:biomodels.db:MODEL1006230039
% isDescribedBy urn:miriam:pubmed:12782119
%
function [T,X] =BennettModelSBML(K,t,dt,L,x0)
    % Parameter:   id =  R_T, name = R_T
        global_par_R_T=K(1);
    % Parameter:   id =  K_1, name = K_1
        global_par_K_1=K(2);
    % Parameter:   id =  K_2, name = K_2
        global_par_K_2 =K(3);
    % Parameter:   id =  k_r, name = k_r
        global_par_k_r= K(4);
    % Parameter:   id =  k_p, name = k_p
        global_par_k_p = K(5);
    % Parameter:   id =  k_e, name = k_e
        global_par_k_e=K(6);
    % Parameter:   id =  xi, name = xi
        global_par_xi=K(7);
    % Parameter:   id =  G_T, name = G_T
        global_par_G_T=K(8);
    % Parameter:   id =  k_deg, name = k_deg
        global_par_k_deg=K(9);
    % Parameter:   id =  k_a, name = k_a
        global_par_k_a=K(10);
    % Parameter:   id =  k_d, name = k_d
        global_par_k_d=K(11);
    % Parameter:   id =  PIP_2_T, name = PIP_2_T
        global_par_PIP_2_T=K(12);
    % Parameter:   id =  r_r, name = r_r
        global_par_r_r=K(13);
    % Parameter:   id =  delta, name = delta
        global_par_delta=K(14);
    % Parameter:   id =  K_c, name = K_c
        global_par_K_c=K(15);
    % Parameter:   id =  alpha, name = alpha
        global_par_alpha=K(16);
    % Parameter:   id =  v, name = v
        global_par_v=K(17);        
    % Parameter:   id =  N_a, name = N_a
        global_par_N_a=K(18);
    % Parameter:   id =  epsilon_r, name = epsilon_r
        global_par_epsilon_r=K(19);
    % Parameter:   id =  d_1, name = d_1
        global_par_d_1=K(20);
    % Parameter:   id =  d_2, name = d_2
        global_par_d_2=K(21);
    % Parameter:   id =  d_3, name = d_3
        global_par_d_3=K(22);
    % Parameter:   id =  d_5, name = d_5
        global_par_d_5=K(23);
    % Parameter:   id =  a_2, name = a_2
        global_par_a_2=K(24);
    % Parameter:   id =  B_e, name = B_e
        global_par_B_e=K(25);
    % Parameter:   id =  K_e, name = K_e
        global_par_K_e=K(26);
    % Parameter:   id =  B_ER, name = B_ER
        global_par_B_ER=K(27);
    % Parameter:   id =  K_ER, name = K_ER
        global_par_K_ER=K(28);
    % Parameter:   id =  B_x, name = B_x
        global_par_B_x=K(29);
    % Parameter:   id =  K_x, name = K_x
        global_par_K_x=K(30);
    % Parameter:   id =  k_3, name = k_3
        global_par_k_3=K(31);
    % Parameter:   id =  eta_1, name = eta_1
        global_par_eta_1=K(32);
    % Parameter:   id =  eta_2, name = eta_2
        global_par_eta_2=K(33);
    % Parameter:   id =  eta_3, name = eta_3
        global_par_eta_3=K(34);
    % Parameter:   id =  C_T, name = C_T
        global_par_C_T=K(35);
    % Parameter:   id =  L, name = L
        global_par_L=L;
    Tgrid = (0:dt:t)';
    function [xdot]=f(t,x)

    % Parameter:   id =  RS, name = RS
    % Parameter:   id =  RS_p, name = RS_p
    % Parameter:   id =  G, name = G
    % Parameter:   id =  IP_3, name = IP_3
    % Parameter:   id =  PIP_2, name = PIP_2
    % Parameter:   id =  r_h, name = r_h
    % Parameter:   id =  rho_r, name = rho_r
    % Parameter:   id =  C, name = C
    % Parameter:   id =  h, name = h
    % Parameter:   id =  tau_h, name = tau_h
    % Parameter:   id =  h_infinit, name = h_infinit
    % Parameter:   id =  zeta, name = zeta
    % Parameter:   id =  m_infinit, name = m_infinit
    % Parameter:   id =  beta, name = beta
    % Parameter:   id =  gamma, name = gamma
    % Parameter:   id =  C_ER, name = C_ER
    % Parameter:   id =  RS_E, name = RS_E
    % rateRule: variable = RS
    global_par_RS = x(1);
    % rateRule: variable = RS_p
    global_par_RS_p = x(2);
    % rateRule: variable = G
    global_par_G = x(3);
    % rateRule: variable = IP_3
    global_par_IP_3 = x(4);
    % rateRule: variable = PIP_2
    global_par_PIP_2 = x(5);
    % rateRule: variable = C
    global_par_C = x(6);
    % rateRule: variable = h
    global_par_h = x(7);
    % assignmentRule: variable = zeta
        global_par_zeta=global_par_d_2*(global_par_IP_3+global_par_d_1)/(global_par_IP_3+global_par_d_3);   
    % assignmentRule: variable = r_h
        global_par_r_h=global_par_alpha*global_par_C/(global_par_K_c+global_par_C)*global_par_G;
    % assignmentRule: variable = rho_r
        global_par_rho_r=global_par_L*global_par_RS/(global_par_xi*global_par_R_T*(global_par_K_1+global_par_L));
    % assignmentRule: variable = tau_h
        global_par_tau_h=(global_par_a_2*(global_par_zeta+global_par_C))^(-1);
    % assignmentRule: variable = h_infinit
        global_par_h_infinit=global_par_zeta/(global_par_zeta+global_par_C);
    % assignmentRule: variable = m_infinit
        global_par_m_infinit=global_par_IP_3/(global_par_d_1+global_par_IP_3)*global_par_C/(global_par_d_5+global_par_C);
    % assignmentRule: variable = beta
        global_par_beta=(1+global_par_K_e*global_par_B_e/(global_par_K_e+global_par_C)^2+global_par_K_x*global_par_B_x/(global_par_K_x+global_par_C)^2)^(-1);
    % assignmentRule: variable = gamma
        global_par_gamma=(1+global_par_B_e/(global_par_K_e+global_par_C)+global_par_B_x/(global_par_K_x+global_par_C))^(-1);
    % assignmentRule: variable = C_ER
        global_par_C_ER=global_par_K_ER/(global_par_B_ER*global_par_epsilon_r)*(global_par_C_T-global_par_C/global_par_gamma);
    % assignmentRule: variable = RS_E
        global_par_RS_E=global_par_k_r*(1+global_par_k_p/global_par_k_e*(global_par_K_2+global_par_L)/(global_par_K_1+global_par_L))/(global_par_k_r+global_par_k_p*global_par_L/(global_par_K_1+global_par_L)+global_par_k_r*global_par_k_p/global_par_k_e*(global_par_K_2+global_par_L)/(global_par_K_1+global_par_L))*global_par_xi*global_par_R_T+(1-global_par_xi)*global_par_R_T;
        xdot=zeros(7,1);
        % rateRule: variable = RS
        xdot(1) = global_par_k_r*global_par_R_T-(global_par_k_r+global_par_k_p*global_par_L/(global_par_K_1+global_par_L))*global_par_RS-global_par_k_r*global_par_RS_p;

        % rateRule: variable = RS_p
        xdot(2) = global_par_L*(global_par_k_p*global_par_RS/(global_par_K_1+global_par_L)-global_par_k_e*global_par_RS_p/(global_par_K_2+global_par_L));

        % rateRule: variable = G
        xdot(3) = global_par_k_a*(global_par_delta+global_par_rho_r)*(global_par_G_T-global_par_G)-global_par_k_d*global_par_G;

        % rateRule: variable = IP_3
        xdot(4) = global_par_r_h*global_par_PIP_2/(global_par_N_a*global_par_v)-global_par_k_deg*global_par_IP_3;

        % rateRule: variable = PIP_2
        xdot(5) = (-(global_par_r_h+global_par_r_r))*global_par_PIP_2-global_par_r_r*global_par_N_a*global_par_v*global_par_IP_3+global_par_r_r*global_par_PIP_2_T;

        % rateRule: variable = C
        xdot(6) = global_par_beta*(global_par_epsilon_r*(global_par_eta_1*global_par_m_infinit^3*global_par_h^3+global_par_eta_2)*(global_par_C_ER-global_par_C)-global_par_eta_3*global_par_C^2/(global_par_k_3^2+global_par_C^2));

        % rateRule: variable = h
        xdot(7) = (global_par_h_infinit-global_par_h)/global_par_tau_h;

    end
    options = odeset('RelTol',1e-4,'AbsTol',1e-4,'Refine',1000);
    %Solving equations
    [T,X]=ode15s(@f,Tgrid,x0,options);


end